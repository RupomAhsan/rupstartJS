{"version":3,"sources":["webpack:///main.ff309f4b0667453d446d.js","webpack:///./src/index.js","webpack:///./src/api/userApi.js","webpack:///./src/api/baseUrl.js","webpack:///./~/buffer/index.js","webpack:///./~/base64-js/index.js","webpack:///./~/ieee754/index.js","webpack:///./~/isarray/index.js"],"names":["webpackJsonp","module","exports","__webpack_require__","global","_userApi","usersContent","getUsers","then","users","forEach","user","id","firstName","lastName","email","document","getElementById","innerHTML","deleteLinks","getElementsByClassName","Array","from","link","onclick","event","element","target","preventDefault","deleteUser","attributes","value","row","parentNode","removeChild","call","this","_interopRequireDefault","obj","__esModule","default","get","del","url","console","log","baseUrl","fetch","onSuccess","onError","request","Request","method","response","json","error","Object","defineProperty","_baseUrl","_baseUrl2","getBaseUrl","getQueryStringParameterByName","name","replace","regexS","regex","RegExp","window","location","href","results","exec","decodeURIComponent","Buffer","typedArraySupport","arr","Uint8Array","__proto__","prototype","foo","subarray","byteLength","e","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","length","RangeError","arg","encodingOrOffset","Error","allocUnsafe","TypeError","ArrayBuffer","fromArrayBuffer","fromString","fromObject","assertSize","size","alloc","fill","encoding","undefined","checked","i","string","isEncoding","actual","write","slice","fromArrayLike","array","byteOffset","isBuffer","len","copy","buffer","isnan","type","isArray","data","toString","SlowBuffer","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","start","end","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","b","n","m","bidirectionalIndexOf","val","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","read","buf","indexSize","readUInt16BE","arrLength","valLength","String","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","base64","fromByteArray","Math","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","push","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","ret","out","toHex","bytes","checkOffset","ext","checkInt","max","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","str","stringtrim","INVALID_BASE64_RE","trim","units","Infinity","leadSurrogate","charCodeAt","byteArray","c","hi","lo","toByteArray","src","dst","INSPECT_MAX_BYTES","poolSize","_augment","Symbol","species","configurable","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","swap16","swap32","swap64","arguments","equals","inspect","match","join","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","maxBytes","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","placeHoldersCount","b64","l","tmp","placeHolders","Arr","L","revLookup","tripletToBase64","num","lookup","encodeChunk","uint8","output","extraBytes","parts","maxChunkLength","len2","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","s","NaN","rt","abs","LN2"],"mappings":"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","file":"main.ff309f4b0667453d446d.js","sourcesContent":["webpackJsonp([0],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tvar _userApi = __webpack_require__(1);\n\t\n\t__webpack_require__(4);\n\t\n\t//Populate the table of users using user API\n\tvar usersContent = '';\n\t(0, _userApi.getUsers)().then(function (users) {\n\t  users.forEach(function (user) {\n\t    usersContent += '<tr>\\n        <td><a href=\"#\" data-id=\"' + user.id + '\" class=\"deleteUser\">Delete</a></td>\\n        <td>' + user.id + '</td>\\n        <td>' + user.firstName + '</td>\\n        <td>' + user.lastName + '</td>\\n        <td>' + user.email + '\\n      </tr>';\n\t  });\n\t  global.document.getElementById('users').innerHTML = usersContent;\n\t  var deleteLinks = global.document.getElementsByClassName('deleteUser');\n\t  Array.from(deleteLinks, function (link) {\n\t    link.onclick = function (event) {\n\t      var element = event.target;\n\t      event.preventDefault();\n\t      (0, _userApi.deleteUser)(element.attributes['data-id'].value);\n\t      var row = element.parentNode.parentNode;\n\t      row.parentNode.removeChild(row);\n\t    };\n\t  });\n\t});\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.getUsers = getUsers;\n\texports.deleteUser = deleteUser;\n\t\n\t__webpack_require__(2);\n\t\n\tvar _baseUrl = __webpack_require__(3);\n\t\n\tvar _baseUrl2 = _interopRequireDefault(_baseUrl);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar baseUrl = (0, _baseUrl2.default)();\n\tfunction getUsers() {\n\t  return get('users');\n\t}\n\t\n\tfunction deleteUser(id) {\n\t  return del('users/' + id);\n\t}\n\t\n\tfunction get(url) {\n\t  console.log(baseUrl + url); //eslint-disable-line no-console\n\t\n\t  return fetch(baseUrl + url).then(onSuccess, onError);\n\t}\n\t\n\tfunction del(url) {\n\t  var request = new Request(baseUrl + url, { method: 'DELETE' });\n\t  return fetch(request).then(onSuccess, onError);\n\t}\n\t\n\tfunction onSuccess(response) {\n\t  //console.log(response);//eslint-disable-line no-console\n\t\n\t  return response.json();\n\t}\n\t\n\tfunction onError(error) {\n\t  console.log(error); //eslint-disable-line no-console\n\t}\n\n/***/ },\n/* 2 */,\n/* 3 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = getBaseUrl;\n\t/*export default function getBaseUrl(){\n\t  const inDevelopment=window.location.hostname==='localhost';\n\t  return inDevelopment?'http://localhost:3001/':'/';\n\t}*/\n\t\n\tfunction getBaseUrl() {\n\t  return getQueryStringParameterByName('useMockApi') ? \"http://localhost:3001/\" : \"/\"; //\"https://desolate-beyond-55700.herokuapp.com/\";\n\t}\n\t\n\tfunction getQueryStringParameterByName(name, url) {\n\t  name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");\n\t  var regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\";\n\t  var regex = new RegExp(regexS, 'i');\n\t  if (!url) {\n\t    url = window.location.href;\n\t  }\n\t  var results = regex.exec(url);\n\t  if (results == null) return \"\";else return decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 5 */,\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!\n\t * The buffer module from node.js, for the browser.\n\t *\n\t * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n\t * @license  MIT\n\t */\n\t/* eslint-disable no-proto */\n\t\n\t'use strict'\n\t\n\tvar base64 = __webpack_require__(7)\n\tvar ieee754 = __webpack_require__(8)\n\tvar isArray = __webpack_require__(9)\n\t\n\texports.Buffer = Buffer\n\texports.SlowBuffer = SlowBuffer\n\texports.INSPECT_MAX_BYTES = 50\n\t\n\t/**\n\t * If `Buffer.TYPED_ARRAY_SUPPORT`:\n\t *   === true    Use Uint8Array implementation (fastest)\n\t *   === false   Use Object implementation (most compatible, even IE6)\n\t *\n\t * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n\t * Opera 11.6+, iOS 4.2+.\n\t *\n\t * Due to various browser bugs, sometimes the Object implementation will be used even\n\t * when the browser supports typed arrays.\n\t *\n\t * Note:\n\t *\n\t *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n\t *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n\t *\n\t *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n\t *\n\t *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n\t *     incorrect length in some situations.\n\t\n\t * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n\t * get the Object implementation, which is slower but behaves correctly.\n\t */\n\tBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n\t  ? global.TYPED_ARRAY_SUPPORT\n\t  : typedArraySupport()\n\t\n\t/*\n\t * Export kMaxLength after typed array support is determined.\n\t */\n\texports.kMaxLength = kMaxLength()\n\t\n\tfunction typedArraySupport () {\n\t  try {\n\t    var arr = new Uint8Array(1)\n\t    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n\t    return arr.foo() === 42 && // typed array instances can be augmented\n\t        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n\t        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n\t  } catch (e) {\n\t    return false\n\t  }\n\t}\n\t\n\tfunction kMaxLength () {\n\t  return Buffer.TYPED_ARRAY_SUPPORT\n\t    ? 0x7fffffff\n\t    : 0x3fffffff\n\t}\n\t\n\tfunction createBuffer (that, length) {\n\t  if (kMaxLength() < length) {\n\t    throw new RangeError('Invalid typed array length')\n\t  }\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    that = new Uint8Array(length)\n\t    that.__proto__ = Buffer.prototype\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    if (that === null) {\n\t      that = new Buffer(length)\n\t    }\n\t    that.length = length\n\t  }\n\t\n\t  return that\n\t}\n\t\n\t/**\n\t * The Buffer constructor returns instances of `Uint8Array` that have their\n\t * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n\t * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n\t * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n\t * returns a single octet.\n\t *\n\t * The `Uint8Array` prototype remains unmodified.\n\t */\n\t\n\tfunction Buffer (arg, encodingOrOffset, length) {\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n\t    return new Buffer(arg, encodingOrOffset, length)\n\t  }\n\t\n\t  // Common case.\n\t  if (typeof arg === 'number') {\n\t    if (typeof encodingOrOffset === 'string') {\n\t      throw new Error(\n\t        'If encoding is specified then the first argument must be a string'\n\t      )\n\t    }\n\t    return allocUnsafe(this, arg)\n\t  }\n\t  return from(this, arg, encodingOrOffset, length)\n\t}\n\t\n\tBuffer.poolSize = 8192 // not used by this implementation\n\t\n\t// TODO: Legacy, not needed anymore. Remove in next major version.\n\tBuffer._augment = function (arr) {\n\t  arr.__proto__ = Buffer.prototype\n\t  return arr\n\t}\n\t\n\tfunction from (that, value, encodingOrOffset, length) {\n\t  if (typeof value === 'number') {\n\t    throw new TypeError('\"value\" argument must not be a number')\n\t  }\n\t\n\t  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n\t    return fromArrayBuffer(that, value, encodingOrOffset, length)\n\t  }\n\t\n\t  if (typeof value === 'string') {\n\t    return fromString(that, value, encodingOrOffset)\n\t  }\n\t\n\t  return fromObject(that, value)\n\t}\n\t\n\t/**\n\t * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n\t * if value is a number.\n\t * Buffer.from(str[, encoding])\n\t * Buffer.from(array)\n\t * Buffer.from(buffer)\n\t * Buffer.from(arrayBuffer[, byteOffset[, length]])\n\t **/\n\tBuffer.from = function (value, encodingOrOffset, length) {\n\t  return from(null, value, encodingOrOffset, length)\n\t}\n\t\n\tif (Buffer.TYPED_ARRAY_SUPPORT) {\n\t  Buffer.prototype.__proto__ = Uint8Array.prototype\n\t  Buffer.__proto__ = Uint8Array\n\t  if (typeof Symbol !== 'undefined' && Symbol.species &&\n\t      Buffer[Symbol.species] === Buffer) {\n\t    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n\t    Object.defineProperty(Buffer, Symbol.species, {\n\t      value: null,\n\t      configurable: true\n\t    })\n\t  }\n\t}\n\t\n\tfunction assertSize (size) {\n\t  if (typeof size !== 'number') {\n\t    throw new TypeError('\"size\" argument must be a number')\n\t  } else if (size < 0) {\n\t    throw new RangeError('\"size\" argument must not be negative')\n\t  }\n\t}\n\t\n\tfunction alloc (that, size, fill, encoding) {\n\t  assertSize(size)\n\t  if (size <= 0) {\n\t    return createBuffer(that, size)\n\t  }\n\t  if (fill !== undefined) {\n\t    // Only pay attention to encoding if it's a string. This\n\t    // prevents accidentally sending in a number that would\n\t    // be interpretted as a start offset.\n\t    return typeof encoding === 'string'\n\t      ? createBuffer(that, size).fill(fill, encoding)\n\t      : createBuffer(that, size).fill(fill)\n\t  }\n\t  return createBuffer(that, size)\n\t}\n\t\n\t/**\n\t * Creates a new filled Buffer instance.\n\t * alloc(size[, fill[, encoding]])\n\t **/\n\tBuffer.alloc = function (size, fill, encoding) {\n\t  return alloc(null, size, fill, encoding)\n\t}\n\t\n\tfunction allocUnsafe (that, size) {\n\t  assertSize(size)\n\t  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n\t    for (var i = 0; i < size; ++i) {\n\t      that[i] = 0\n\t    }\n\t  }\n\t  return that\n\t}\n\t\n\t/**\n\t * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n\t * */\n\tBuffer.allocUnsafe = function (size) {\n\t  return allocUnsafe(null, size)\n\t}\n\t/**\n\t * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n\t */\n\tBuffer.allocUnsafeSlow = function (size) {\n\t  return allocUnsafe(null, size)\n\t}\n\t\n\tfunction fromString (that, string, encoding) {\n\t  if (typeof encoding !== 'string' || encoding === '') {\n\t    encoding = 'utf8'\n\t  }\n\t\n\t  if (!Buffer.isEncoding(encoding)) {\n\t    throw new TypeError('\"encoding\" must be a valid string encoding')\n\t  }\n\t\n\t  var length = byteLength(string, encoding) | 0\n\t  that = createBuffer(that, length)\n\t\n\t  var actual = that.write(string, encoding)\n\t\n\t  if (actual !== length) {\n\t    // Writing a hex string, for example, that contains invalid characters will\n\t    // cause everything after the first invalid character to be ignored. (e.g.\n\t    // 'abxxcd' will be treated as 'ab')\n\t    that = that.slice(0, actual)\n\t  }\n\t\n\t  return that\n\t}\n\t\n\tfunction fromArrayLike (that, array) {\n\t  var length = array.length < 0 ? 0 : checked(array.length) | 0\n\t  that = createBuffer(that, length)\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromArrayBuffer (that, array, byteOffset, length) {\n\t  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\t\n\t  if (byteOffset < 0 || array.byteLength < byteOffset) {\n\t    throw new RangeError('\\'offset\\' is out of bounds')\n\t  }\n\t\n\t  if (array.byteLength < byteOffset + (length || 0)) {\n\t    throw new RangeError('\\'length\\' is out of bounds')\n\t  }\n\t\n\t  if (byteOffset === undefined && length === undefined) {\n\t    array = new Uint8Array(array)\n\t  } else if (length === undefined) {\n\t    array = new Uint8Array(array, byteOffset)\n\t  } else {\n\t    array = new Uint8Array(array, byteOffset, length)\n\t  }\n\t\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    that = array\n\t    that.__proto__ = Buffer.prototype\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    that = fromArrayLike(that, array)\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromObject (that, obj) {\n\t  if (Buffer.isBuffer(obj)) {\n\t    var len = checked(obj.length) | 0\n\t    that = createBuffer(that, len)\n\t\n\t    if (that.length === 0) {\n\t      return that\n\t    }\n\t\n\t    obj.copy(that, 0, 0, len)\n\t    return that\n\t  }\n\t\n\t  if (obj) {\n\t    if ((typeof ArrayBuffer !== 'undefined' &&\n\t        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n\t      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n\t        return createBuffer(that, 0)\n\t      }\n\t      return fromArrayLike(that, obj)\n\t    }\n\t\n\t    if (obj.type === 'Buffer' && isArray(obj.data)) {\n\t      return fromArrayLike(that, obj.data)\n\t    }\n\t  }\n\t\n\t  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n\t}\n\t\n\tfunction checked (length) {\n\t  // Note: cannot use `length < kMaxLength()` here because that fails when\n\t  // length is NaN (which is otherwise coerced to zero.)\n\t  if (length >= kMaxLength()) {\n\t    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n\t                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n\t  }\n\t  return length | 0\n\t}\n\t\n\tfunction SlowBuffer (length) {\n\t  if (+length != length) { // eslint-disable-line eqeqeq\n\t    length = 0\n\t  }\n\t  return Buffer.alloc(+length)\n\t}\n\t\n\tBuffer.isBuffer = function isBuffer (b) {\n\t  return !!(b != null && b._isBuffer)\n\t}\n\t\n\tBuffer.compare = function compare (a, b) {\n\t  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n\t    throw new TypeError('Arguments must be Buffers')\n\t  }\n\t\n\t  if (a === b) return 0\n\t\n\t  var x = a.length\n\t  var y = b.length\n\t\n\t  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n\t    if (a[i] !== b[i]) {\n\t      x = a[i]\n\t      y = b[i]\n\t      break\n\t    }\n\t  }\n\t\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t}\n\t\n\tBuffer.isEncoding = function isEncoding (encoding) {\n\t  switch (String(encoding).toLowerCase()) {\n\t    case 'hex':\n\t    case 'utf8':\n\t    case 'utf-8':\n\t    case 'ascii':\n\t    case 'latin1':\n\t    case 'binary':\n\t    case 'base64':\n\t    case 'ucs2':\n\t    case 'ucs-2':\n\t    case 'utf16le':\n\t    case 'utf-16le':\n\t      return true\n\t    default:\n\t      return false\n\t  }\n\t}\n\t\n\tBuffer.concat = function concat (list, length) {\n\t  if (!isArray(list)) {\n\t    throw new TypeError('\"list\" argument must be an Array of Buffers')\n\t  }\n\t\n\t  if (list.length === 0) {\n\t    return Buffer.alloc(0)\n\t  }\n\t\n\t  var i\n\t  if (length === undefined) {\n\t    length = 0\n\t    for (i = 0; i < list.length; ++i) {\n\t      length += list[i].length\n\t    }\n\t  }\n\t\n\t  var buffer = Buffer.allocUnsafe(length)\n\t  var pos = 0\n\t  for (i = 0; i < list.length; ++i) {\n\t    var buf = list[i]\n\t    if (!Buffer.isBuffer(buf)) {\n\t      throw new TypeError('\"list\" argument must be an Array of Buffers')\n\t    }\n\t    buf.copy(buffer, pos)\n\t    pos += buf.length\n\t  }\n\t  return buffer\n\t}\n\t\n\tfunction byteLength (string, encoding) {\n\t  if (Buffer.isBuffer(string)) {\n\t    return string.length\n\t  }\n\t  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n\t      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n\t    return string.byteLength\n\t  }\n\t  if (typeof string !== 'string') {\n\t    string = '' + string\n\t  }\n\t\n\t  var len = string.length\n\t  if (len === 0) return 0\n\t\n\t  // Use a for loop to avoid recursion\n\t  var loweredCase = false\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'ascii':\n\t      case 'latin1':\n\t      case 'binary':\n\t        return len\n\t      case 'utf8':\n\t      case 'utf-8':\n\t      case undefined:\n\t        return utf8ToBytes(string).length\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return len * 2\n\t      case 'hex':\n\t        return len >>> 1\n\t      case 'base64':\n\t        return base64ToBytes(string).length\n\t      default:\n\t        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n\t        encoding = ('' + encoding).toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\tBuffer.byteLength = byteLength\n\t\n\tfunction slowToString (encoding, start, end) {\n\t  var loweredCase = false\n\t\n\t  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n\t  // property of a typed array.\n\t\n\t  // This behaves neither like String nor Uint8Array in that we set start/end\n\t  // to their upper/lower bounds if the value passed is out of range.\n\t  // undefined is handled specially as per ECMA-262 6th Edition,\n\t  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\t  if (start === undefined || start < 0) {\n\t    start = 0\n\t  }\n\t  // Return early if start > this.length. Done here to prevent potential uint32\n\t  // coercion fail below.\n\t  if (start > this.length) {\n\t    return ''\n\t  }\n\t\n\t  if (end === undefined || end > this.length) {\n\t    end = this.length\n\t  }\n\t\n\t  if (end <= 0) {\n\t    return ''\n\t  }\n\t\n\t  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n\t  end >>>= 0\n\t  start >>>= 0\n\t\n\t  if (end <= start) {\n\t    return ''\n\t  }\n\t\n\t  if (!encoding) encoding = 'utf8'\n\t\n\t  while (true) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexSlice(this, start, end)\n\t\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Slice(this, start, end)\n\t\n\t      case 'ascii':\n\t        return asciiSlice(this, start, end)\n\t\n\t      case 'latin1':\n\t      case 'binary':\n\t        return latin1Slice(this, start, end)\n\t\n\t      case 'base64':\n\t        return base64Slice(this, start, end)\n\t\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return utf16leSlice(this, start, end)\n\t\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = (encoding + '').toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\t\n\t// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n\t// Buffer instances.\n\tBuffer.prototype._isBuffer = true\n\t\n\tfunction swap (b, n, m) {\n\t  var i = b[n]\n\t  b[n] = b[m]\n\t  b[m] = i\n\t}\n\t\n\tBuffer.prototype.swap16 = function swap16 () {\n\t  var len = this.length\n\t  if (len % 2 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 16-bits')\n\t  }\n\t  for (var i = 0; i < len; i += 2) {\n\t    swap(this, i, i + 1)\n\t  }\n\t  return this\n\t}\n\t\n\tBuffer.prototype.swap32 = function swap32 () {\n\t  var len = this.length\n\t  if (len % 4 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 32-bits')\n\t  }\n\t  for (var i = 0; i < len; i += 4) {\n\t    swap(this, i, i + 3)\n\t    swap(this, i + 1, i + 2)\n\t  }\n\t  return this\n\t}\n\t\n\tBuffer.prototype.swap64 = function swap64 () {\n\t  var len = this.length\n\t  if (len % 8 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 64-bits')\n\t  }\n\t  for (var i = 0; i < len; i += 8) {\n\t    swap(this, i, i + 7)\n\t    swap(this, i + 1, i + 6)\n\t    swap(this, i + 2, i + 5)\n\t    swap(this, i + 3, i + 4)\n\t  }\n\t  return this\n\t}\n\t\n\tBuffer.prototype.toString = function toString () {\n\t  var length = this.length | 0\n\t  if (length === 0) return ''\n\t  if (arguments.length === 0) return utf8Slice(this, 0, length)\n\t  return slowToString.apply(this, arguments)\n\t}\n\t\n\tBuffer.prototype.equals = function equals (b) {\n\t  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t  if (this === b) return true\n\t  return Buffer.compare(this, b) === 0\n\t}\n\t\n\tBuffer.prototype.inspect = function inspect () {\n\t  var str = ''\n\t  var max = exports.INSPECT_MAX_BYTES\n\t  if (this.length > 0) {\n\t    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n\t    if (this.length > max) str += ' ... '\n\t  }\n\t  return '<Buffer ' + str + '>'\n\t}\n\t\n\tBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n\t  if (!Buffer.isBuffer(target)) {\n\t    throw new TypeError('Argument must be a Buffer')\n\t  }\n\t\n\t  if (start === undefined) {\n\t    start = 0\n\t  }\n\t  if (end === undefined) {\n\t    end = target ? target.length : 0\n\t  }\n\t  if (thisStart === undefined) {\n\t    thisStart = 0\n\t  }\n\t  if (thisEnd === undefined) {\n\t    thisEnd = this.length\n\t  }\n\t\n\t  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n\t    throw new RangeError('out of range index')\n\t  }\n\t\n\t  if (thisStart >= thisEnd && start >= end) {\n\t    return 0\n\t  }\n\t  if (thisStart >= thisEnd) {\n\t    return -1\n\t  }\n\t  if (start >= end) {\n\t    return 1\n\t  }\n\t\n\t  start >>>= 0\n\t  end >>>= 0\n\t  thisStart >>>= 0\n\t  thisEnd >>>= 0\n\t\n\t  if (this === target) return 0\n\t\n\t  var x = thisEnd - thisStart\n\t  var y = end - start\n\t  var len = Math.min(x, y)\n\t\n\t  var thisCopy = this.slice(thisStart, thisEnd)\n\t  var targetCopy = target.slice(start, end)\n\t\n\t  for (var i = 0; i < len; ++i) {\n\t    if (thisCopy[i] !== targetCopy[i]) {\n\t      x = thisCopy[i]\n\t      y = targetCopy[i]\n\t      break\n\t    }\n\t  }\n\t\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t}\n\t\n\t// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n\t// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n\t//\n\t// Arguments:\n\t// - buffer - a Buffer to search\n\t// - val - a string, Buffer, or number\n\t// - byteOffset - an index into `buffer`; will be clamped to an int32\n\t// - encoding - an optional encoding, relevant is val is a string\n\t// - dir - true for indexOf, false for lastIndexOf\n\tfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n\t  // Empty buffer means no match\n\t  if (buffer.length === 0) return -1\n\t\n\t  // Normalize byteOffset\n\t  if (typeof byteOffset === 'string') {\n\t    encoding = byteOffset\n\t    byteOffset = 0\n\t  } else if (byteOffset > 0x7fffffff) {\n\t    byteOffset = 0x7fffffff\n\t  } else if (byteOffset < -0x80000000) {\n\t    byteOffset = -0x80000000\n\t  }\n\t  byteOffset = +byteOffset  // Coerce to Number.\n\t  if (isNaN(byteOffset)) {\n\t    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n\t    byteOffset = dir ? 0 : (buffer.length - 1)\n\t  }\n\t\n\t  // Normalize byteOffset: negative offsets start from the end of the buffer\n\t  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n\t  if (byteOffset >= buffer.length) {\n\t    if (dir) return -1\n\t    else byteOffset = buffer.length - 1\n\t  } else if (byteOffset < 0) {\n\t    if (dir) byteOffset = 0\n\t    else return -1\n\t  }\n\t\n\t  // Normalize val\n\t  if (typeof val === 'string') {\n\t    val = Buffer.from(val, encoding)\n\t  }\n\t\n\t  // Finally, search either indexOf (if dir is true) or lastIndexOf\n\t  if (Buffer.isBuffer(val)) {\n\t    // Special case: looking for empty string/buffer always fails\n\t    if (val.length === 0) {\n\t      return -1\n\t    }\n\t    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n\t  } else if (typeof val === 'number') {\n\t    val = val & 0xFF // Search for a byte value [0-255]\n\t    if (Buffer.TYPED_ARRAY_SUPPORT &&\n\t        typeof Uint8Array.prototype.indexOf === 'function') {\n\t      if (dir) {\n\t        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n\t      } else {\n\t        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n\t      }\n\t    }\n\t    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n\t  }\n\t\n\t  throw new TypeError('val must be string, number or Buffer')\n\t}\n\t\n\tfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n\t  var indexSize = 1\n\t  var arrLength = arr.length\n\t  var valLength = val.length\n\t\n\t  if (encoding !== undefined) {\n\t    encoding = String(encoding).toLowerCase()\n\t    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n\t        encoding === 'utf16le' || encoding === 'utf-16le') {\n\t      if (arr.length < 2 || val.length < 2) {\n\t        return -1\n\t      }\n\t      indexSize = 2\n\t      arrLength /= 2\n\t      valLength /= 2\n\t      byteOffset /= 2\n\t    }\n\t  }\n\t\n\t  function read (buf, i) {\n\t    if (indexSize === 1) {\n\t      return buf[i]\n\t    } else {\n\t      return buf.readUInt16BE(i * indexSize)\n\t    }\n\t  }\n\t\n\t  var i\n\t  if (dir) {\n\t    var foundIndex = -1\n\t    for (i = byteOffset; i < arrLength; i++) {\n\t      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n\t        if (foundIndex === -1) foundIndex = i\n\t        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n\t      } else {\n\t        if (foundIndex !== -1) i -= i - foundIndex\n\t        foundIndex = -1\n\t      }\n\t    }\n\t  } else {\n\t    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n\t    for (i = byteOffset; i >= 0; i--) {\n\t      var found = true\n\t      for (var j = 0; j < valLength; j++) {\n\t        if (read(arr, i + j) !== read(val, j)) {\n\t          found = false\n\t          break\n\t        }\n\t      }\n\t      if (found) return i\n\t    }\n\t  }\n\t\n\t  return -1\n\t}\n\t\n\tBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n\t  return this.indexOf(val, byteOffset, encoding) !== -1\n\t}\n\t\n\tBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n\t  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n\t}\n\t\n\tBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n\t  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n\t}\n\t\n\tfunction hexWrite (buf, string, offset, length) {\n\t  offset = Number(offset) || 0\n\t  var remaining = buf.length - offset\n\t  if (!length) {\n\t    length = remaining\n\t  } else {\n\t    length = Number(length)\n\t    if (length > remaining) {\n\t      length = remaining\n\t    }\n\t  }\n\t\n\t  // must be an even number of digits\n\t  var strLen = string.length\n\t  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\t\n\t  if (length > strLen / 2) {\n\t    length = strLen / 2\n\t  }\n\t  for (var i = 0; i < length; ++i) {\n\t    var parsed = parseInt(string.substr(i * 2, 2), 16)\n\t    if (isNaN(parsed)) return i\n\t    buf[offset + i] = parsed\n\t  }\n\t  return i\n\t}\n\t\n\tfunction utf8Write (buf, string, offset, length) {\n\t  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\t\n\tfunction asciiWrite (buf, string, offset, length) {\n\t  return blitBuffer(asciiToBytes(string), buf, offset, length)\n\t}\n\t\n\tfunction latin1Write (buf, string, offset, length) {\n\t  return asciiWrite(buf, string, offset, length)\n\t}\n\t\n\tfunction base64Write (buf, string, offset, length) {\n\t  return blitBuffer(base64ToBytes(string), buf, offset, length)\n\t}\n\t\n\tfunction ucs2Write (buf, string, offset, length) {\n\t  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\t\n\tBuffer.prototype.write = function write (string, offset, length, encoding) {\n\t  // Buffer#write(string)\n\t  if (offset === undefined) {\n\t    encoding = 'utf8'\n\t    length = this.length\n\t    offset = 0\n\t  // Buffer#write(string, encoding)\n\t  } else if (length === undefined && typeof offset === 'string') {\n\t    encoding = offset\n\t    length = this.length\n\t    offset = 0\n\t  // Buffer#write(string, offset[, length][, encoding])\n\t  } else if (isFinite(offset)) {\n\t    offset = offset | 0\n\t    if (isFinite(length)) {\n\t      length = length | 0\n\t      if (encoding === undefined) encoding = 'utf8'\n\t    } else {\n\t      encoding = length\n\t      length = undefined\n\t    }\n\t  // legacy write(string, encoding, offset, length) - remove in v0.13\n\t  } else {\n\t    throw new Error(\n\t      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n\t    )\n\t  }\n\t\n\t  var remaining = this.length - offset\n\t  if (length === undefined || length > remaining) length = remaining\n\t\n\t  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n\t    throw new RangeError('Attempt to write outside buffer bounds')\n\t  }\n\t\n\t  if (!encoding) encoding = 'utf8'\n\t\n\t  var loweredCase = false\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexWrite(this, string, offset, length)\n\t\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Write(this, string, offset, length)\n\t\n\t      case 'ascii':\n\t        return asciiWrite(this, string, offset, length)\n\t\n\t      case 'latin1':\n\t      case 'binary':\n\t        return latin1Write(this, string, offset, length)\n\t\n\t      case 'base64':\n\t        // Warning: maxLength not taken into account in base64Write\n\t        return base64Write(this, string, offset, length)\n\t\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return ucs2Write(this, string, offset, length)\n\t\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = ('' + encoding).toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\t\n\tBuffer.prototype.toJSON = function toJSON () {\n\t  return {\n\t    type: 'Buffer',\n\t    data: Array.prototype.slice.call(this._arr || this, 0)\n\t  }\n\t}\n\t\n\tfunction base64Slice (buf, start, end) {\n\t  if (start === 0 && end === buf.length) {\n\t    return base64.fromByteArray(buf)\n\t  } else {\n\t    return base64.fromByteArray(buf.slice(start, end))\n\t  }\n\t}\n\t\n\tfunction utf8Slice (buf, start, end) {\n\t  end = Math.min(buf.length, end)\n\t  var res = []\n\t\n\t  var i = start\n\t  while (i < end) {\n\t    var firstByte = buf[i]\n\t    var codePoint = null\n\t    var bytesPerSequence = (firstByte > 0xEF) ? 4\n\t      : (firstByte > 0xDF) ? 3\n\t      : (firstByte > 0xBF) ? 2\n\t      : 1\n\t\n\t    if (i + bytesPerSequence <= end) {\n\t      var secondByte, thirdByte, fourthByte, tempCodePoint\n\t\n\t      switch (bytesPerSequence) {\n\t        case 1:\n\t          if (firstByte < 0x80) {\n\t            codePoint = firstByte\n\t          }\n\t          break\n\t        case 2:\n\t          secondByte = buf[i + 1]\n\t          if ((secondByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n\t            if (tempCodePoint > 0x7F) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t          break\n\t        case 3:\n\t          secondByte = buf[i + 1]\n\t          thirdByte = buf[i + 2]\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n\t            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t          break\n\t        case 4:\n\t          secondByte = buf[i + 1]\n\t          thirdByte = buf[i + 2]\n\t          fourthByte = buf[i + 3]\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n\t            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t      }\n\t    }\n\t\n\t    if (codePoint === null) {\n\t      // we did not generate a valid codePoint so insert a\n\t      // replacement char (U+FFFD) and advance only 1 byte\n\t      codePoint = 0xFFFD\n\t      bytesPerSequence = 1\n\t    } else if (codePoint > 0xFFFF) {\n\t      // encode to utf16 (surrogate pair dance)\n\t      codePoint -= 0x10000\n\t      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n\t      codePoint = 0xDC00 | codePoint & 0x3FF\n\t    }\n\t\n\t    res.push(codePoint)\n\t    i += bytesPerSequence\n\t  }\n\t\n\t  return decodeCodePointsArray(res)\n\t}\n\t\n\t// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n\t// the lowest limit is Chrome, with 0x10000 args.\n\t// We go 1 magnitude less, for safety\n\tvar MAX_ARGUMENTS_LENGTH = 0x1000\n\t\n\tfunction decodeCodePointsArray (codePoints) {\n\t  var len = codePoints.length\n\t  if (len <= MAX_ARGUMENTS_LENGTH) {\n\t    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n\t  }\n\t\n\t  // Decode in chunks to avoid \"call stack size exceeded\".\n\t  var res = ''\n\t  var i = 0\n\t  while (i < len) {\n\t    res += String.fromCharCode.apply(\n\t      String,\n\t      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n\t    )\n\t  }\n\t  return res\n\t}\n\t\n\tfunction asciiSlice (buf, start, end) {\n\t  var ret = ''\n\t  end = Math.min(buf.length, end)\n\t\n\t  for (var i = start; i < end; ++i) {\n\t    ret += String.fromCharCode(buf[i] & 0x7F)\n\t  }\n\t  return ret\n\t}\n\t\n\tfunction latin1Slice (buf, start, end) {\n\t  var ret = ''\n\t  end = Math.min(buf.length, end)\n\t\n\t  for (var i = start; i < end; ++i) {\n\t    ret += String.fromCharCode(buf[i])\n\t  }\n\t  return ret\n\t}\n\t\n\tfunction hexSlice (buf, start, end) {\n\t  var len = buf.length\n\t\n\t  if (!start || start < 0) start = 0\n\t  if (!end || end < 0 || end > len) end = len\n\t\n\t  var out = ''\n\t  for (var i = start; i < end; ++i) {\n\t    out += toHex(buf[i])\n\t  }\n\t  return out\n\t}\n\t\n\tfunction utf16leSlice (buf, start, end) {\n\t  var bytes = buf.slice(start, end)\n\t  var res = ''\n\t  for (var i = 0; i < bytes.length; i += 2) {\n\t    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n\t  }\n\t  return res\n\t}\n\t\n\tBuffer.prototype.slice = function slice (start, end) {\n\t  var len = this.length\n\t  start = ~~start\n\t  end = end === undefined ? len : ~~end\n\t\n\t  if (start < 0) {\n\t    start += len\n\t    if (start < 0) start = 0\n\t  } else if (start > len) {\n\t    start = len\n\t  }\n\t\n\t  if (end < 0) {\n\t    end += len\n\t    if (end < 0) end = 0\n\t  } else if (end > len) {\n\t    end = len\n\t  }\n\t\n\t  if (end < start) end = start\n\t\n\t  var newBuf\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    newBuf = this.subarray(start, end)\n\t    newBuf.__proto__ = Buffer.prototype\n\t  } else {\n\t    var sliceLen = end - start\n\t    newBuf = new Buffer(sliceLen, undefined)\n\t    for (var i = 0; i < sliceLen; ++i) {\n\t      newBuf[i] = this[i + start]\n\t    }\n\t  }\n\t\n\t  return newBuf\n\t}\n\t\n\t/*\n\t * Need to make sure that buffer isn't trying to write out of bounds.\n\t */\n\tfunction checkOffset (offset, ext, length) {\n\t  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n\t  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n\t}\n\t\n\tBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var val = this[offset]\n\t  var mul = 1\n\t  var i = 0\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul\n\t  }\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) {\n\t    checkOffset(offset, byteLength, this.length)\n\t  }\n\t\n\t  var val = this[offset + --byteLength]\n\t  var mul = 1\n\t  while (byteLength > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --byteLength] * mul\n\t  }\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t  return this[offset]\n\t}\n\t\n\tBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  return this[offset] | (this[offset + 1] << 8)\n\t}\n\t\n\tBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  return (this[offset] << 8) | this[offset + 1]\n\t}\n\t\n\tBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return ((this[offset]) |\n\t      (this[offset + 1] << 8) |\n\t      (this[offset + 2] << 16)) +\n\t      (this[offset + 3] * 0x1000000)\n\t}\n\t\n\tBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset] * 0x1000000) +\n\t    ((this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    this[offset + 3])\n\t}\n\t\n\tBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var val = this[offset]\n\t  var mul = 1\n\t  var i = 0\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul\n\t  }\n\t  mul *= 0x80\n\t\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var i = byteLength\n\t  var mul = 1\n\t  var val = this[offset + --i]\n\t  while (i > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --i] * mul\n\t  }\n\t  mul *= 0x80\n\t\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t  if (!(this[offset] & 0x80)) return (this[offset])\n\t  return ((0xff - this[offset] + 1) * -1)\n\t}\n\t\n\tBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  var val = this[offset] | (this[offset + 1] << 8)\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t}\n\t\n\tBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  var val = this[offset + 1] | (this[offset] << 8)\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t}\n\t\n\tBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset]) |\n\t    (this[offset + 1] << 8) |\n\t    (this[offset + 2] << 16) |\n\t    (this[offset + 3] << 24)\n\t}\n\t\n\tBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset] << 24) |\n\t    (this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    (this[offset + 3])\n\t}\n\t\n\tBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t  return ieee754.read(this, offset, true, 23, 4)\n\t}\n\t\n\tBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t  return ieee754.read(this, offset, false, 23, 4)\n\t}\n\t\n\tBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t  return ieee754.read(this, offset, true, 52, 8)\n\t}\n\t\n\tBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t  return ieee754.read(this, offset, false, 52, 8)\n\t}\n\t\n\tfunction checkInt (buf, value, offset, ext, max, min) {\n\t  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n\t  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n\t  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n\t}\n\t\n\tBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) {\n\t    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n\t    checkInt(this, value, offset, byteLength, maxBytes, 0)\n\t  }\n\t\n\t  var mul = 1\n\t  var i = 0\n\t  this[offset] = value & 0xFF\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) {\n\t    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n\t    checkInt(this, value, offset, byteLength, maxBytes, 0)\n\t  }\n\t\n\t  var i = byteLength - 1\n\t  var mul = 1\n\t  this[offset + i] = value & 0xFF\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n\t  this[offset] = (value & 0xff)\n\t  return offset + 1\n\t}\n\t\n\tfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffff + value + 1\n\t  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n\t    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n\t      (littleEndian ? i : 1 - i) * 8\n\t  }\n\t}\n\t\n\tBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8)\n\t    this[offset + 1] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffffffff + value + 1\n\t  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n\t    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n\t  }\n\t}\n\t\n\tBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset + 3] = (value >>> 24)\n\t    this[offset + 2] = (value >>> 16)\n\t    this[offset + 1] = (value >>> 8)\n\t    this[offset] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24)\n\t    this[offset + 1] = (value >>> 16)\n\t    this[offset + 2] = (value >>> 8)\n\t    this[offset + 3] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1)\n\t\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t  }\n\t\n\t  var i = 0\n\t  var mul = 1\n\t  var sub = 0\n\t  this[offset] = value & 0xFF\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n\t      sub = 1\n\t    }\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1)\n\t\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t  }\n\t\n\t  var i = byteLength - 1\n\t  var mul = 1\n\t  var sub = 0\n\t  this[offset + i] = value & 0xFF\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n\t      sub = 1\n\t    }\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n\t  if (value < 0) value = 0xff + value + 1\n\t  this[offset] = (value & 0xff)\n\t  return offset + 1\n\t}\n\t\n\tBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8)\n\t    this[offset + 1] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t    this[offset + 2] = (value >>> 16)\n\t    this[offset + 3] = (value >>> 24)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t  if (value < 0) value = 0xffffffff + value + 1\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24)\n\t    this[offset + 1] = (value >>> 16)\n\t    this[offset + 2] = (value >>> 8)\n\t    this[offset + 3] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n\t  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n\t  if (offset < 0) throw new RangeError('Index out of range')\n\t}\n\t\n\tfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n\t  }\n\t  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, true, noAssert)\n\t}\n\t\n\tBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, false, noAssert)\n\t}\n\t\n\tfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n\t  }\n\t  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n\t  return offset + 8\n\t}\n\t\n\tBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, true, noAssert)\n\t}\n\t\n\tBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, false, noAssert)\n\t}\n\t\n\t// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\tBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n\t  if (!start) start = 0\n\t  if (!end && end !== 0) end = this.length\n\t  if (targetStart >= target.length) targetStart = target.length\n\t  if (!targetStart) targetStart = 0\n\t  if (end > 0 && end < start) end = start\n\t\n\t  // Copy 0 bytes; we're done\n\t  if (end === start) return 0\n\t  if (target.length === 0 || this.length === 0) return 0\n\t\n\t  // Fatal error conditions\n\t  if (targetStart < 0) {\n\t    throw new RangeError('targetStart out of bounds')\n\t  }\n\t  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n\t  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\t\n\t  // Are we oob?\n\t  if (end > this.length) end = this.length\n\t  if (target.length - targetStart < end - start) {\n\t    end = target.length - targetStart + start\n\t  }\n\t\n\t  var len = end - start\n\t  var i\n\t\n\t  if (this === target && start < targetStart && targetStart < end) {\n\t    // descending copy from end\n\t    for (i = len - 1; i >= 0; --i) {\n\t      target[i + targetStart] = this[i + start]\n\t    }\n\t  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // ascending copy from start\n\t    for (i = 0; i < len; ++i) {\n\t      target[i + targetStart] = this[i + start]\n\t    }\n\t  } else {\n\t    Uint8Array.prototype.set.call(\n\t      target,\n\t      this.subarray(start, start + len),\n\t      targetStart\n\t    )\n\t  }\n\t\n\t  return len\n\t}\n\t\n\t// Usage:\n\t//    buffer.fill(number[, offset[, end]])\n\t//    buffer.fill(buffer[, offset[, end]])\n\t//    buffer.fill(string[, offset[, end]][, encoding])\n\tBuffer.prototype.fill = function fill (val, start, end, encoding) {\n\t  // Handle string cases:\n\t  if (typeof val === 'string') {\n\t    if (typeof start === 'string') {\n\t      encoding = start\n\t      start = 0\n\t      end = this.length\n\t    } else if (typeof end === 'string') {\n\t      encoding = end\n\t      end = this.length\n\t    }\n\t    if (val.length === 1) {\n\t      var code = val.charCodeAt(0)\n\t      if (code < 256) {\n\t        val = code\n\t      }\n\t    }\n\t    if (encoding !== undefined && typeof encoding !== 'string') {\n\t      throw new TypeError('encoding must be a string')\n\t    }\n\t    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n\t      throw new TypeError('Unknown encoding: ' + encoding)\n\t    }\n\t  } else if (typeof val === 'number') {\n\t    val = val & 255\n\t  }\n\t\n\t  // Invalid ranges are not set to a default, so can range check early.\n\t  if (start < 0 || this.length < start || this.length < end) {\n\t    throw new RangeError('Out of range index')\n\t  }\n\t\n\t  if (end <= start) {\n\t    return this\n\t  }\n\t\n\t  start = start >>> 0\n\t  end = end === undefined ? this.length : end >>> 0\n\t\n\t  if (!val) val = 0\n\t\n\t  var i\n\t  if (typeof val === 'number') {\n\t    for (i = start; i < end; ++i) {\n\t      this[i] = val\n\t    }\n\t  } else {\n\t    var bytes = Buffer.isBuffer(val)\n\t      ? val\n\t      : utf8ToBytes(new Buffer(val, encoding).toString())\n\t    var len = bytes.length\n\t    for (i = 0; i < end - start; ++i) {\n\t      this[i + start] = bytes[i % len]\n\t    }\n\t  }\n\t\n\t  return this\n\t}\n\t\n\t// HELPER FUNCTIONS\n\t// ================\n\t\n\tvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\t\n\tfunction base64clean (str) {\n\t  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n\t  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n\t  // Node converts strings with length < 2 to ''\n\t  if (str.length < 2) return ''\n\t  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\t  while (str.length % 4 !== 0) {\n\t    str = str + '='\n\t  }\n\t  return str\n\t}\n\t\n\tfunction stringtrim (str) {\n\t  if (str.trim) return str.trim()\n\t  return str.replace(/^\\s+|\\s+$/g, '')\n\t}\n\t\n\tfunction toHex (n) {\n\t  if (n < 16) return '0' + n.toString(16)\n\t  return n.toString(16)\n\t}\n\t\n\tfunction utf8ToBytes (string, units) {\n\t  units = units || Infinity\n\t  var codePoint\n\t  var length = string.length\n\t  var leadSurrogate = null\n\t  var bytes = []\n\t\n\t  for (var i = 0; i < length; ++i) {\n\t    codePoint = string.charCodeAt(i)\n\t\n\t    // is surrogate component\n\t    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n\t      // last char was a lead\n\t      if (!leadSurrogate) {\n\t        // no lead yet\n\t        if (codePoint > 0xDBFF) {\n\t          // unexpected trail\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          continue\n\t        } else if (i + 1 === length) {\n\t          // unpaired lead\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          continue\n\t        }\n\t\n\t        // valid lead\n\t        leadSurrogate = codePoint\n\t\n\t        continue\n\t      }\n\t\n\t      // 2 leads in a row\n\t      if (codePoint < 0xDC00) {\n\t        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t        leadSurrogate = codePoint\n\t        continue\n\t      }\n\t\n\t      // valid surrogate pair\n\t      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n\t    } else if (leadSurrogate) {\n\t      // valid bmp char, but last char was a lead\n\t      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t    }\n\t\n\t    leadSurrogate = null\n\t\n\t    // encode utf8\n\t    if (codePoint < 0x80) {\n\t      if ((units -= 1) < 0) break\n\t      bytes.push(codePoint)\n\t    } else if (codePoint < 0x800) {\n\t      if ((units -= 2) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x6 | 0xC0,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else if (codePoint < 0x10000) {\n\t      if ((units -= 3) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0xC | 0xE0,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else if (codePoint < 0x110000) {\n\t      if ((units -= 4) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x12 | 0xF0,\n\t        codePoint >> 0xC & 0x3F | 0x80,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else {\n\t      throw new Error('Invalid code point')\n\t    }\n\t  }\n\t\n\t  return bytes\n\t}\n\t\n\tfunction asciiToBytes (str) {\n\t  var byteArray = []\n\t  for (var i = 0; i < str.length; ++i) {\n\t    // Node's code seems to be doing this and not & 0x7F..\n\t    byteArray.push(str.charCodeAt(i) & 0xFF)\n\t  }\n\t  return byteArray\n\t}\n\t\n\tfunction utf16leToBytes (str, units) {\n\t  var c, hi, lo\n\t  var byteArray = []\n\t  for (var i = 0; i < str.length; ++i) {\n\t    if ((units -= 2) < 0) break\n\t\n\t    c = str.charCodeAt(i)\n\t    hi = c >> 8\n\t    lo = c % 256\n\t    byteArray.push(lo)\n\t    byteArray.push(hi)\n\t  }\n\t\n\t  return byteArray\n\t}\n\t\n\tfunction base64ToBytes (str) {\n\t  return base64.toByteArray(base64clean(str))\n\t}\n\t\n\tfunction blitBuffer (src, dst, offset, length) {\n\t  for (var i = 0; i < length; ++i) {\n\t    if ((i + offset >= dst.length) || (i >= src.length)) break\n\t    dst[i + offset] = src[i]\n\t  }\n\t  return i\n\t}\n\t\n\tfunction isnan (val) {\n\t  return val !== val // eslint-disable-line no-self-compare\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6).Buffer, (function() { return this; }())))\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict'\n\t\n\texports.byteLength = byteLength\n\texports.toByteArray = toByteArray\n\texports.fromByteArray = fromByteArray\n\t\n\tvar lookup = []\n\tvar revLookup = []\n\tvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\t\n\tvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n\tfor (var i = 0, len = code.length; i < len; ++i) {\n\t  lookup[i] = code[i]\n\t  revLookup[code.charCodeAt(i)] = i\n\t}\n\t\n\trevLookup['-'.charCodeAt(0)] = 62\n\trevLookup['_'.charCodeAt(0)] = 63\n\t\n\tfunction placeHoldersCount (b64) {\n\t  var len = b64.length\n\t  if (len % 4 > 0) {\n\t    throw new Error('Invalid string. Length must be a multiple of 4')\n\t  }\n\t\n\t  // the number of equal signs (place holders)\n\t  // if there are two placeholders, than the two characters before it\n\t  // represent one byte\n\t  // if there is only one, then the three characters before it represent 2 bytes\n\t  // this is just a cheap hack to not do indexOf twice\n\t  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\t}\n\t\n\tfunction byteLength (b64) {\n\t  // base64 is 4/3 + up to two characters of the original data\n\t  return b64.length * 3 / 4 - placeHoldersCount(b64)\n\t}\n\t\n\tfunction toByteArray (b64) {\n\t  var i, j, l, tmp, placeHolders, arr\n\t  var len = b64.length\n\t  placeHolders = placeHoldersCount(b64)\n\t\n\t  arr = new Arr(len * 3 / 4 - placeHolders)\n\t\n\t  // if there are placeholders, only get up to the last complete 4 chars\n\t  l = placeHolders > 0 ? len - 4 : len\n\t\n\t  var L = 0\n\t\n\t  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n\t    arr[L++] = (tmp >> 16) & 0xFF\n\t    arr[L++] = (tmp >> 8) & 0xFF\n\t    arr[L++] = tmp & 0xFF\n\t  }\n\t\n\t  if (placeHolders === 2) {\n\t    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n\t    arr[L++] = tmp & 0xFF\n\t  } else if (placeHolders === 1) {\n\t    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n\t    arr[L++] = (tmp >> 8) & 0xFF\n\t    arr[L++] = tmp & 0xFF\n\t  }\n\t\n\t  return arr\n\t}\n\t\n\tfunction tripletToBase64 (num) {\n\t  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n\t}\n\t\n\tfunction encodeChunk (uint8, start, end) {\n\t  var tmp\n\t  var output = []\n\t  for (var i = start; i < end; i += 3) {\n\t    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t    output.push(tripletToBase64(tmp))\n\t  }\n\t  return output.join('')\n\t}\n\t\n\tfunction fromByteArray (uint8) {\n\t  var tmp\n\t  var len = uint8.length\n\t  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n\t  var output = ''\n\t  var parts = []\n\t  var maxChunkLength = 16383 // must be multiple of 3\n\t\n\t  // go through the array every three bytes, we'll deal with trailing stuff later\n\t  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n\t    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n\t  }\n\t\n\t  // pad the end with zeros, but make sure to not forget the extra bytes\n\t  if (extraBytes === 1) {\n\t    tmp = uint8[len - 1]\n\t    output += lookup[tmp >> 2]\n\t    output += lookup[(tmp << 4) & 0x3F]\n\t    output += '=='\n\t  } else if (extraBytes === 2) {\n\t    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n\t    output += lookup[tmp >> 10]\n\t    output += lookup[(tmp >> 4) & 0x3F]\n\t    output += lookup[(tmp << 2) & 0x3F]\n\t    output += '='\n\t  }\n\t\n\t  parts.push(output)\n\t\n\t  return parts.join('')\n\t}\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\texports.read = function (buffer, offset, isLE, mLen, nBytes) {\n\t  var e, m\n\t  var eLen = nBytes * 8 - mLen - 1\n\t  var eMax = (1 << eLen) - 1\n\t  var eBias = eMax >> 1\n\t  var nBits = -7\n\t  var i = isLE ? (nBytes - 1) : 0\n\t  var d = isLE ? -1 : 1\n\t  var s = buffer[offset + i]\n\t\n\t  i += d\n\t\n\t  e = s & ((1 << (-nBits)) - 1)\n\t  s >>= (-nBits)\n\t  nBits += eLen\n\t  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\t\n\t  m = e & ((1 << (-nBits)) - 1)\n\t  e >>= (-nBits)\n\t  nBits += mLen\n\t  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\t\n\t  if (e === 0) {\n\t    e = 1 - eBias\n\t  } else if (e === eMax) {\n\t    return m ? NaN : ((s ? -1 : 1) * Infinity)\n\t  } else {\n\t    m = m + Math.pow(2, mLen)\n\t    e = e - eBias\n\t  }\n\t  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n\t}\n\t\n\texports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n\t  var e, m, c\n\t  var eLen = nBytes * 8 - mLen - 1\n\t  var eMax = (1 << eLen) - 1\n\t  var eBias = eMax >> 1\n\t  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n\t  var i = isLE ? 0 : (nBytes - 1)\n\t  var d = isLE ? 1 : -1\n\t  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\t\n\t  value = Math.abs(value)\n\t\n\t  if (isNaN(value) || value === Infinity) {\n\t    m = isNaN(value) ? 1 : 0\n\t    e = eMax\n\t  } else {\n\t    e = Math.floor(Math.log(value) / Math.LN2)\n\t    if (value * (c = Math.pow(2, -e)) < 1) {\n\t      e--\n\t      c *= 2\n\t    }\n\t    if (e + eBias >= 1) {\n\t      value += rt / c\n\t    } else {\n\t      value += rt * Math.pow(2, 1 - eBias)\n\t    }\n\t    if (value * c >= 2) {\n\t      e++\n\t      c /= 2\n\t    }\n\t\n\t    if (e + eBias >= eMax) {\n\t      m = 0\n\t      e = eMax\n\t    } else if (e + eBias >= 1) {\n\t      m = (value * c - 1) * Math.pow(2, mLen)\n\t      e = e + eBias\n\t    } else {\n\t      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n\t      e = 0\n\t    }\n\t  }\n\t\n\t  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\t\n\t  e = (e << mLen) | m\n\t  eLen += mLen\n\t  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\t\n\t  buffer[offset + i - d] |= s * 128\n\t}\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\tvar toString = {}.toString;\n\t\n\tmodule.exports = Array.isArray || function (arr) {\n\t  return toString.call(arr) == '[object Array]';\n\t};\n\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** main.ff309f4b0667453d446d.js\n **/","import {getUsers,deleteUser} from './api/userApi';\nimport \"./index.css\";\n//Populate the table of users using user API\nlet usersContent = '';\n  getUsers().then((users) => {\n    users.forEach((user) => {\n      usersContent += `<tr>\n        <td><a href=\"#\" data-id=\"${user.id}\" class=\"deleteUser\">Delete</a></td>\n        <td>${user.id}</td>\n        <td>${user.firstName}</td>\n        <td>${user.lastName}</td>\n        <td>${user.email}\n      </tr>`;\n    });\n    global.document.getElementById('users').innerHTML = usersContent;\n     const deleteLinks = global.document.getElementsByClassName('deleteUser');\n    Array.from(deleteLinks, (link) => {\n      link.onclick = function(event) {\n        const element = event.target;\n        event.preventDefault();\n        deleteUser(element.attributes['data-id'].value);\n        const row = element.parentNode.parentNode;\n        row.parentNode.removeChild(row);\n      }\n    });\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import 'whatwg-fetch';\nimport getBaseUrl from './baseUrl';\n\n\nconst baseUrl=getBaseUrl();\nexport function getUsers(){\n  return get('users');\n}\n\nexport function deleteUser(id) {\n  return del(`users/${id}`);\n}\n\nfunction get(url){\n  console.log(baseUrl + url);//eslint-disable-line no-console\n\n  return fetch(baseUrl + url).then(onSuccess,onError);\n}\n\nfunction del(url) {\n  const request = new Request(baseUrl + url, { method: 'DELETE' });\n  return fetch(request).then(onSuccess, onError);\n\n}\n\nfunction onSuccess(response){\n  //console.log(response);//eslint-disable-line no-console\n\n  return response.json();\n}\n\nfunction onError(error){\n  console.log(error); //eslint-disable-line no-console\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/userApi.js\n **/","/*export default function getBaseUrl(){\n  const inDevelopment=window.location.hostname==='localhost';\n  return inDevelopment?'http://localhost:3001/':'/';\n}*/\n\nexport default function getBaseUrl() {\n return getQueryStringParameterByName('useMockApi') ? \"http://localhost:3001/\" :\"/\"; //\"https://desolate-beyond-55700.herokuapp.com/\";\n}\n\nfunction getQueryStringParameterByName(name, url) {\n  name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");\n  var regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\";\n  var regex = new RegExp(regexS, 'i');\n  if (!url) {\n    url = window.location.href;\n  }\n  var results = regex.exec(url);\n  if (results == null) return \"\";\n  else return decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/baseUrl.js\n **/","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/buffer/index.js\n ** module id = 6\n ** module chunks = 0\n **/","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/base64-js/index.js\n ** module id = 7\n ** module chunks = 0\n **/","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ieee754/index.js\n ** module id = 8\n ** module chunks = 0\n **/","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/isarray/index.js\n ** module id = 9\n ** module chunks = 0\n **/"],"sourceRoot":""}